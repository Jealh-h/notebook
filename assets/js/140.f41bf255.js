(window.webpackJsonp=window.webpackJsonp||[]).push([[140],{324:function(t,a,s){"use strict";s.r(a);var r=s(6),v=Object(r.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"面向对象软件设计原则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#面向对象软件设计原则"}},[t._v("#")]),t._v(" 面向对象软件设计原则")]),t._v(" "),a("h2",{attrs:{id:"开放封闭原则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#开放封闭原则"}},[t._v("#")]),t._v(" 开放封闭原则")]),t._v(" "),a("blockquote",[a("p",[t._v("软件对扩展应该是开放的，对修改应该是关闭的。通俗来说就是开发一个软件时，应该可以对它进行功能扩展（开放），而在进行这些扩展的时候，不需要对原来的程序进行修改。")])]),t._v(" "),a("h2",{attrs:{id:"单一职责原则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#单一职责原则"}},[t._v("#")]),t._v(" 单一职责原则")]),t._v(" "),a("blockquote",[a("p",[t._v("就一个类而言，应该仅有一个引起它变化的原因")])]),t._v(" "),a("h2",{attrs:{id:"里氏代换原则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#里氏代换原则"}},[t._v("#")]),t._v(" 里氏代换原则")]),t._v(" "),a("blockquote",[a("p",[t._v("继承必须确保超类所拥有的性质在子类中仍然成立。当一个子类的实例能够替换任何其超类的实例时，它们之间才具有继承关系。")])]),t._v(" "),a("h2",{attrs:{id:"依赖倒转原则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#依赖倒转原则"}},[t._v("#")]),t._v(" 依赖倒转原则")]),t._v(" "),a("blockquote",[a("p",[t._v("一个类与类之间的调用规则。\n如果一个类的一个成员或参数是一个具体类型，那么这个类就依赖于这个具体类型。如果在一个继承结构中，上层类中的一个成员或参数为一个下层类型，那么这个继承结构就是搞成依赖于底层了，就是尽量面向接口或抽象编程。")])]),t._v(" "),a("h2",{attrs:{id:"接口隔离原则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#接口隔离原则"}},[t._v("#")]),t._v(" 接口隔离原则")]),t._v(" "),a("blockquote",[a("p",[t._v("第一种定义：客户端不应该依赖它不需要的接口，依赖它需要的接口，客户端需要什么接口就提供什么接口。\n第二种定义：类间的依赖关系应该建立在最小的接口上，它要求是最小的接口，这也是要求接口细化，接口纯洁。")])]),t._v(" "),a("h2",{attrs:{id:"迪米特法则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#迪米特法则"}},[t._v("#")]),t._v(" 迪米特法则")]),t._v(" "),a("blockquote",[a("p",[t._v("一个对象应该对其他对象有最少的了解。通俗讲就是，一个类对自己需要耦合或者调用的类应该知道的最少，你类内部怎么复杂、怎么纠缠不清的都和我没关系，那是你的类内部的事情，我就知道你提供这么多的public方法，我就调用这个。")])]),t._v(" "),a("ul",[a("li",[t._v("一个软件实体应当尽可能少地与其他实体发生相互作用")]),t._v(" "),a("li",[t._v("每一个软件单位对其他单位都只有最少的只是而且局限于哪些与本单位密切相关的软件单位。")]),t._v(" "),a("li",[t._v("迪米特法则的初衷在于降低类之间的耦合。由于每个类尽量减少对其他类的依赖，因此很容易使得系统的功能模块功能独立，相互之间不存在或很少有依赖关系。")]),t._v(" "),a("li",[t._v("迪米特法则不希望类直接建立直接的接触。")])])])}),[],!1,null,null,null);a.default=v.exports}}]);