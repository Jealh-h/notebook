(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{216:function(s,t,e){"use strict";e.r(t);var a=e(6),r=Object(a.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"正则表达式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#正则表达式"}},[s._v("#")]),s._v(" 正则表达式")]),s._v(" "),t("blockquote",[t("p",[s._v("正则表达式比较难以理解，放在进阶里面加深理解")])]),s._v(" "),t("h2",{attrs:{id:"正则表达式类-regexp"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#正则表达式类-regexp"}},[s._v("#")]),s._v(" 正则表达式类 RegExp")]),s._v(" "),t("h3",{attrs:{id:"创建"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#创建"}},[s._v("#")]),s._v(" 创建")]),s._v(" "),t("ol",[t("li",[s._v("字面量创建")])]),s._v(" "),t("div",{staticClass:"language-ts extra-class"},[t("pre",{pre:!0,attrs:{class:"language-ts"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" reg "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token regex"}},[t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[s._v("\\d")]),t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),t("ol",{attrs:{start:"2"}},[t("li",[s._v("构造函数创建\n"),t("blockquote",[t("p",[s._v("接受两个参数，第一个为匹配的模式，第二位标志位。")])])])]),s._v(" "),t("p",[s._v("标志位有如下枚举：")]),s._v(" "),t("ol",[t("li",[s._v("g 全局匹配：找到所有的匹配，而不是在第一个匹配停止")]),s._v(" "),t("li",[s._v("i 忽略大小写")]),s._v(" "),t("li",[s._v("m 多行匹配，\\r、\\n")]),s._v(" "),t("li",[s._v("s 允许 "),t("code",[s._v(".")]),s._v(" 匹配新的行")]),s._v(" "),t("li",[s._v("u 将模式看作是 unicode 编码")]),s._v(" "),t("li",[s._v("y 粘性匹配，每次匹配从上一次匹配的 index 开始匹配。")])]),s._v(" "),t("div",{staticClass:"language-ts extra-class"},[t("pre",{pre:!0,attrs:{class:"language-ts"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" ref "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RegExp")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token regex"}},[t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[s._v("\\d")]),t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])])])}),[],!1,null,null,null);t.default=r.exports}}]);